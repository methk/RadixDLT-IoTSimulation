"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var typescript_map_1 = require("typescript-map");
var RadixKeyPair_1 = tslib_1.__importDefault(require("../wallet/RadixKeyPair"));
var RadixDataAccountSystem_1 = tslib_1.__importDefault(require("./RadixDataAccountSystem"));
var RadixUniverse_1 = require("../universe/RadixUniverse");
var __1 = require("../..");
var RadixAccount = /** @class */ (function () {
    /**
     * Creates an instance of radix account.
     * @param keyPair Public key of the account
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     */
    function RadixAccount(keyPair, plain) {
        if (plain === void 0) { plain = false; }
        var _this = this;
        this.keyPair = keyPair;
        this.accountSystems = new typescript_map_1.TSMap();
        this.connectionStatus = new rxjs_1.BehaviorSubject('STARTING');
        this.openNodeConnection = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, error_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.connectionStatus.next('CONNECTING');
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        _a = this;
                        return [4 /*yield*/, RadixUniverse_1.radixUniverse.getNodeConnection(this.keyPair.getShard())];
                    case 2:
                        _a.nodeConnection = _b.sent();
                        this.connectionStatus.next('CONNECTED');
                        this.nodeConnection.on('closed', this._onConnectionClosed);
                        // Subscribe to events
                        this.atomSubscription = this.nodeConnection.subscribe(this.keyPair.toString());
                        this.atomSubscription.subscribe({
                            next: this._onAtomReceived,
                            error: function (error) { return console.error("Subscription error: " + error); }
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _b.sent();
                        console.error(error_1);
                        setTimeout(this._onConnectionClosed, 1000);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        this._onAtomReceived = function (atomUpdate) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var e_1, _a, _b, _c, system, e_1_1;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, 6, 7]);
                        _b = tslib_1.__values(this.accountSystems.values()), _c = _b.next();
                        _d.label = 1;
                    case 1:
                        if (!!_c.done) return [3 /*break*/, 4];
                        system = _c.value;
                        return [4 /*yield*/, system.processAtomUpdate(atomUpdate)];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        _c = _b.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        }); };
        this._onConnectionClosed = function () {
            // Get a new one
            _this.openNodeConnection();
        };
        if (!plain) {
            this.cacheSystem = new __1.RadixCacheAccountSystem(keyPair);
            this.addAccountSystem(this.cacheSystem);
            this.decryptionSystem = new __1.RadixDecryptionAccountSystem();
            this.addAccountSystem(this.decryptionSystem);
            this.transferSystem = new __1.RadixTransferAccountSystem(keyPair);
            this.addAccountSystem(this.transferSystem);
            this.dataSystem = new RadixDataAccountSystem_1.default(keyPair);
            this.addAccountSystem(this.dataSystem);
            this.messagingSystem = new __1.RadixMessagingAccountSystem(keyPair);
            this.addAccountSystem(this.messagingSystem);
        }
    }
    /**
     * Create an instance of radix account from an address
     * @param address string address
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     * @returns
     */
    RadixAccount.fromAddress = function (address, plain) {
        if (plain === void 0) { plain = false; }
        return new RadixAccount(RadixKeyPair_1.default.fromAddress(address), plain);
    };
    RadixAccount.prototype.enableDecryption = function (decryptionProvider) {
        this.decryptionSystem.decryptionProvider = decryptionProvider;
    };
    RadixAccount.prototype.enableCache = function (cacheProvider) {
        var _this = this;
        this.cacheSystem.atomCache = cacheProvider;
        // Load atoms from cache
        return this.cacheSystem.loadAtoms().then(function (atoms) {
            var e_2, _a;
            try {
                for (var atoms_1 = tslib_1.__values(atoms), atoms_1_1 = atoms_1.next(); !atoms_1_1.done; atoms_1_1 = atoms_1.next()) {
                    var atom = atoms_1_1.value;
                    _this._onAtomReceived({
                        action: 'STORE',
                        atom: atom,
                    });
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (atoms_1_1 && !atoms_1_1.done && (_a = atoms_1.return)) _a.call(atoms_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    };
    RadixAccount.prototype.getAddress = function () {
        return this.keyPair.getAddress();
    };
    RadixAccount.prototype.addAccountSystem = function (system) {
        if (this.accountSystems.has(system.name)) {
            throw new Error("System \"" + system.name + "\" already exists in account, you can only have one of each system per account");
        }
        this.accountSystems.set(system.name, system);
        return system;
    };
    RadixAccount.prototype.removeAccountSystem = function (name) {
        if (this.accountSystems.has(name)) {
            this.accountSystems.delete(name);
        }
    };
    RadixAccount.prototype.getSystem = function (name) {
        if (this.accountSystems.has(name)) {
            return this.accountSystems.get(name);
        }
        throw new Error("System \"" + name + "\" doesn't exist in account");
    };
    return RadixAccount;
}());
exports.default = RadixAccount;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBY2NvdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYWNjb3VudC9SYWRpeEFjY291bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQStDO0FBQy9DLGlEQUFzQztBQUl0QyxnRkFBaUQ7QUFFakQsNEZBQTZEO0FBRzdELDJEQUF5RDtBQUV6RCwyQkFBOEo7QUFFOUo7SUFhSTs7Ozs7T0FLRztJQUNILHNCQUFxQixPQUFxQixFQUFFLEtBQWE7UUFBYixzQkFBQSxFQUFBLGFBQWE7UUFBekQsaUJBaUJDO1FBakJvQixZQUFPLEdBQVAsT0FBTyxDQUFjO1FBakJsQyxtQkFBYyxHQUFzQyxJQUFJLHNCQUFLLEVBQUUsQ0FBQTtRQUdoRSxxQkFBZ0IsR0FBNEIsSUFBSSxzQkFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBOEYzRSx1QkFBa0IsR0FBRzs7Ozs7d0JBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7Ozs7d0JBRXBDLEtBQUEsSUFBSSxDQUFBO3dCQUFrQixxQkFBTSw2QkFBYSxDQUFDLGlCQUFpQixDQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUMxQixFQUFBOzt3QkFGRCxHQUFLLGNBQWMsR0FBRyxTQUVyQixDQUFBO3dCQUNELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7d0JBQ3ZDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQTt3QkFFMUQsc0JBQXNCO3dCQUN0QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQzFCLENBQUE7d0JBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFD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