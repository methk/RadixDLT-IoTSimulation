"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var long_1 = tslib_1.__importDefault(require("long"));
var bn_js_1 = tslib_1.__importDefault(require("bn.js"));
var crypto_1 = tslib_1.__importDefault(require("crypto"));
var RadixUtil = /** @class */ (function () {
    function RadixUtil() {
    }
    RadixUtil.hash = function (data, offset, len) {
        if (offset) {
            data = data.slice(offset, len);
        }
        if (!Buffer.isBuffer(data)) {
            data = Buffer.from(data);
        }
        // Double hash to protect against length extension attacks
        var hash1 = crypto_1.default.createHash('sha256');
        hash1.update(data);
        var hash2 = crypto_1.default.createHash('sha256');
        hash2.update(hash1.digest());
        return hash2.digest();
    };
    RadixUtil.bigIntFromByteArray = function (bytes) {
        return new bn_js_1.default(bytes).fromTwos(bytes.length * 8);
    };
    RadixUtil.byteArrayFromBigInt = function (number) {
        return number.toTwos(8 * number.byteLength()).toArrayLike(Buffer);
    };
    RadixUtil.longFromBigInt = function (number) {
        // Emulate Java BigInteger.longValue(), following the spec at 5.1.3 https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html
        var byteLength = Math.max(8, number.byteLength());
        var bytes = number.toTwos(8 * byteLength).toArray('be', byteLength);
        var truncatedBytes = bytes.slice(bytes.length - 8, bytes.length);
        return long_1.default.fromBytesBE(truncatedBytes);
    };
    RadixUtil.bigIntFromLong = function (number) {
        return new bn_js_1.default(number.toBytesBE(), 'be').fromTwos(64);
    };
    RadixUtil.powTargetFromAtomSize = function (size) {
        var target = Buffer.alloc(32, 0xff);
        var leadingBits = Math.ceil(Math.log(size * 8));
        var leadingBytes = Math.floor(leadingBits / 8);
        var leftOverBits = leadingBits % 8;
        target.fill(0, 0, leadingBytes);
        var middleByte = ~(0xff << (8 - leftOverBits)) & 0xff;
        target.writeUInt8(middleByte, leadingBytes);
        return target;
    };
    RadixUtil.shuffleArray = function (arr) {
        return arr
            .map(function (a) { return [Math.random(), a]; })
            .sort(function (a, b) { return a[0] - b[0]; })
            .map(function (a) { return a[1]; });
    };
    return RadixUtil;
}());
exports.default = RadixUtil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhVdGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL1JhZGl4VXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzREFBdUI7QUFDdkIsd0RBQXNCO0FBQ3RCLDBEQUEyQjtBQUUzQjtJQUFBO0lBaUVBLENBQUM7SUFoRWlCLGNBQUksR0FBbEIsVUFDSSxJQUE0QixFQUM1QixNQUFlLEVBQ2YsR0FBWTtRQUVaLElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQ2pDO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDeEIsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDM0I7UUFFRCwwREFBMEQ7UUFDMUQsSUFBTSxLQUFLLEdBQUcsZ0JBQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDekMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUVsQixJQUFNLEtBQUssR0FBRyxnQkFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN6QyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO1FBRTVCLE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ3pCLENBQUM7SUFFYSw2QkFBbUIsR0FBakMsVUFBa0MsS0FBYTtRQUMzQyxPQUFPLElBQUksZUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ25ELENBQUM7SUFFYSw2QkFBbUIsR0FBakMsVUFBa0MsTUFBVTtRQUN4QyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNyRSxDQUFDO0lBRWEsd0JBQWMsR0FBNUIsVUFBNkIsTUFBVTtRQUNuQyxnSUFBZ0k7UUFDaEksSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUE7UUFDakQsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUNyRSxJQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNsRSxPQUFPLGNBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDM0MsQ0FBQztJQUVhLHdCQUFjLEdBQTVCLFVBQTZCLE1BQVk7UUFDckMsT0FBTyxJQUFJLGVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3hELENBQUM7SUFFYSwrQkFBcUIsR0FBbkMsVUFBb0MsSUFBWTtRQUM1QyxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUVyQyxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDakQsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDaEQsSUFBTSxZQUFZLEdBQUcsV0FBVyxHQUFHLENBQUMsQ0FBQTtRQUVwQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUE7UUFFL0IsSUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQTtRQUV2RCxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQTtRQUUzQyxPQUFPLE1BQU0sQ0FBQTtJQUNqQixDQUFDO0lBRWEsc0JBQVksR0FBRyxVQUFBLEdBQUc7UUFDNUIsT0FBQSxHQUFHO2FBQ0UsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQWxCLENBQWtCLENBQUM7YUFDNUIsSUFBSSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQVgsQ0FBVyxDQUFDO2FBQzNCLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBSixDQUFJLENBQUM7SUFIbkIsQ0FHbUIsQ0FBQTtJQUMzQixnQkFBQztDQUFBLEFBakVELElBaUVDO2tCQWpFb0IsU0FBUyJ9