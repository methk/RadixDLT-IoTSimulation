"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RadixPOW_1 = tslib_1.__importDefault(require("./RadixPOW"));
var RadixPOWTask = /** @class */ (function () {
    function RadixPOWTask(magic, seed, target) {
        this.magic = magic;
        this.seed = seed;
        this.target = target;
        this.pow = new RadixPOW_1.default(magic, seed);
        console.log(target.toString('hex'));
    }
    RadixPOWTask.prototype.computePow = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.attemptPow(resolve);
        });
    };
    // attemptPow(callback: Function) {
    //    const hash = this.pow.getHash()
    //    if (this.meetsTarget(hash)) {
    //        console.log(hash.toString('hex'))
    //        callback(this.pow)
    //    }
    //    else {
    //        this.pow.incrementNonce()
    //        // Non-blocking
    //        setTimeout(() => {
    //            this.attemptPow(callback)
    //        }, 0)
    //    }
    // }
    RadixPOWTask.prototype.attemptPow = function (callback) {
        var _this = this;
        for (var i = 0; i < 100; i++) {
            this.pow.incrementNonce();
            var hash = this.pow.getHash();
            if (this.meetsTarget(hash)) {
                console.log(hash.toString('hex'));
                setTimeout(function () {
                    callback(_this.pow);
                });
                return;
            }
        }
        // Non-blocking
        setTimeout(function () {
            _this.attemptPow(callback);
        }, 0);
    };
    RadixPOWTask.prototype.meetsTarget = function (hash) {
        return hash.compare(this.target) < 0;
    };
    return RadixPOWTask;
}());
exports.default = RadixPOWTask;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhQT1dUYXNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvcG93L1JhZGl4UE9XVGFzay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxnRUFBaUM7QUFFakM7SUFHSSxzQkFDYSxLQUFhLEVBQ2IsSUFBWSxFQUNaLE1BQWM7UUFGZCxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNaLFdBQU0sR0FBTixNQUFNLENBQVE7UUFFdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGtCQUFRLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFRCxpQ0FBVSxHQUFWO1FBQUEsaUJBSUM7UUFIRyxPQUFPLElBQUksT0FBTyxDQUFXLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDekMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM1QixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxtQ0FBbUM7SUFDbkMscUNBQXFDO0lBQ3JDLG1DQUFtQztJQUNuQywyQ0FBMkM7SUFDM0MsNEJBQTRCO0lBQzVCLE9BQU87SUFDUCxZQUFZO0lBQ1osbUNBQW1DO0lBRW5DLHlCQUF5QjtJQUN6Qiw0QkFBNEI7SUFDNUIsdUNBQXVDO0lBQ3ZDLGVBQWU7SUFDZixPQUFPO0lBQ1AsSUFBSTtJQUVKLGlDQUFVLEdBQVYsVUFBVyxRQUFrQjtRQUE3QixpQkFvQkM7UUFuQkcsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFBO1lBQ3pCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUE7WUFFL0IsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtnQkFFakMsVUFBVSxDQUFDO29CQUNQLFFBQVEsQ0FBQyxLQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQ3RCLENBQUMsQ0FBQyxDQUFBO2dCQUVGLE9BQU07YUFDVDtTQUNKO1FBRUQsZUFBZTtRQUNmLFVBQVUsQ0FBQztZQUNQLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDN0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ1QsQ0FBQztJQUVELGtDQUFXLEdBQVgsVUFBWSxJQUFZO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3hDLENBQUM7SUFDTCxtQkFBQztBQUFELENBQUMsQUEzREQsSUEyREMifQ==