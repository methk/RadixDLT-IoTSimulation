"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var nedb_1 = tslib_1.__importDefault(require("nedb"));
var RadixAtomModel_1 = require("../RadixAtomModel");
var RadixNEDBAtomCache = /** @class */ (function () {
    /**
     * Creates an instance of radix nedbatom cache.
     * @param filename File path on disk in Node, path in localStorage in the browser
     */
    function RadixNEDBAtomCache(filename) {
        var _this = this;
        this.storeAtom = function (atom) {
            return _this.notExists({ _id: atom._id })
                .then(function () {
                // console.log('Atom doesnt exist, storing ', atom._id, atom)
                // Add particle ids?
                // Serialize
                var serializedAtom = atom.toJson();
                serializedAtom['_id'] = atom._id;
                // console.log(serializedAtom)
                // Store
                return _this.insert(serializedAtom);
            })
                .then(function (newDoc) {
                // Success
                // console.log('Atom stored in DB', newDoc)
                // console.log()
                return atom;
            })
                .catch(function (error) {
                // console.error(error)
                console.warn('Atom already in DB');
            });
        };
        this.getAtoms = function (keyPair) {
            // Find
            var query = {};
            // Filter by destination
            if (keyPair) {
                var destination = keyPair.getUID().toJson();
                query = { destinations: destination };
            }
            // console.log(query)
            return _this.find(query).then(function (atoms) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var e_1, _a, deserialized, atoms_1, atoms_1_1, atom, _b, _c, e_1_1;
                return tslib_1.__generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            deserialized = [];
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 6, 7, 8]);
                            atoms_1 = tslib_1.__values(atoms), atoms_1_1 = atoms_1.next();
                            _d.label = 2;
                        case 2:
                            if (!!atoms_1_1.done) return [3 /*break*/, 5];
                            atom = atoms_1_1.value;
                            _c = (_b = deserialized).push;
                            return [4 /*yield*/, this.asyncDeserialize(atom)];
                        case 3:
                            _c.apply(_b, [_d.sent()]);
                            _d.label = 4;
                        case 4:
                            atoms_1_1 = atoms_1.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_1_1 = _d.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (atoms_1_1 && !atoms_1_1.done && (_a = atoms_1.return)) _a.call(atoms_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 8: return [2 /*return*/, deserialized];
                    }
                });
            }); });
        };
        // Promise wrappers for nedb
        this.findOne = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.findOne(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.notExists = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.findOne(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else if (!doc) {
                        resolve(true);
                    }
                    reject('Atom already in db');
                });
            });
        };
        this.find = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.find(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.insert = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.insert(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.remove = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.remove(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.db = new nedb_1.default({
            filename: filename,
            autoload: true,
        });
    }
    /**
     * Clears all atoms from the cache
     */
    RadixNEDBAtomCache.prototype.reset = function () {
        this.db.remove({}, { multi: true }, function (error, numRemoved) {
            // Do nothing
        });
    };
    RadixNEDBAtomCache.prototype.asyncDeserialize = function (atom) {
        return new Promise(function (resolve, reject) {
            setTimeout(function () {
                resolve(RadixAtomModel_1.RadixSerializer.fromJson(atom));
            }, 0);
        });
    };
    RadixNEDBAtomCache.prototype.deleteAtom = function (atom) {
        return this.remove({ _id: atom._id });
    };
    return RadixNEDBAtomCache;
}());
exports.default = RadixNEDBAtomCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhORURCQXRvbUNhY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvY2FjaGUvUmFkaXhORURCQXRvbUNhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNEQUE0QjtBQUk1QixvREFBNEU7QUFFNUU7SUFHSTs7O09BR0c7SUFDSCw0QkFBWSxRQUFnQjtRQUE1QixpQkFLQztRQVdNLGNBQVMsR0FBRyxVQUFDLElBQWU7WUFHL0IsT0FBTyxLQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztpQkFDbkMsSUFBSSxDQUFDO2dCQUNGLDZEQUE2RDtnQkFDN0Qsb0JBQW9CO2dCQUVwQixZQUFZO2dCQUNaLElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtnQkFDcEMsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUE7Z0JBQ2hDLDhCQUE4QjtnQkFFOUIsUUFBUTtnQkFDUixPQUFPLEtBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUE7WUFDdEMsQ0FBQyxDQUFDO2lCQUNELElBQUksQ0FBQyxVQUFDLE1BQVc7Z0JBQ2QsVUFBVTtnQkFDViwyQ0FBMkM7Z0JBQzNDLGdCQUFnQjtnQkFFaEIsT0FBTyxJQUFJLENBQUE7WUFDZixDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLFVBQUEsS0FBSztnQkFDUix1QkFBdUI7Z0JBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtZQUN0QyxDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUMsQ0FBQTtRQUVNLGFBQVEsR0FBRyxVQUFDLE9BQXNCO1lBQ3JDLE9BQU87WUFDUCxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUE7WUFFZCx3QkFBd0I7WUFDeEIsSUFBSSxPQUFPLEVBQUU7Z0JBQ1QsSUFBTSxXQUFXLEdB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