"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RadixUtil_1 = tslib_1.__importDefault(require("../common/RadixUtil"));
var RadixAtomModel_1 = require("../RadixAtomModel");
var RadixUniverse_1 = require("../universe/RadixUniverse");
var elliptic_1 = tslib_1.__importDefault(require("elliptic"));
var bs58_1 = tslib_1.__importDefault(require("bs58"));
var universe = RadixUniverse_1.radixUniverse;
var ec = new elliptic_1.default.ec('secp256k1');
var RadixKeyPair = /** @class */ (function () {
    function RadixKeyPair() {
    }
    RadixKeyPair.generateNew = function () {
        var radixKeyPair = new RadixKeyPair();
        radixKeyPair.keyPair = ec.genKeyPair();
        return radixKeyPair;
    };
    RadixKeyPair.fromAddress = function (address) {
        var raw = Array.prototype.slice.call(bs58_1.default.decode(address), 0);
        // Universe check
        if (universe.getMagicByte() != raw[0]) {
            throw new Error('Address is from a different universe');
        }
        // Checksum
        var check = RadixUtil_1.default.hash(raw.splice(0, raw.length - 4), 0, raw.length - 4);
        for (var i = 0; i < 4; i++) {
            if (check[i] != raw[raw.length - 4 + i]) {
                throw new Error('Invalid address');
            }
        }
        raw = Array.prototype.slice.call(bs58_1.default.decode(address), 0);
        var radixKeyPair = new RadixKeyPair();
        radixKeyPair.keyPair = ec.keyFromPublic(raw.splice(1, raw.length - 5));
        return radixKeyPair;
    };
    RadixKeyPair.fromPublic = function (publicKey) {
        if (!publicKey) {
            throw 'Missing public key';
        }
        if (publicKey.length != 33) {
            throw 'Public key must be 33 bytes, but was ' + publicKey.length;
        }
        var radixKeyPair = new RadixKeyPair();
        radixKeyPair.keyPair = ec.keyFromPublic(publicKey);
        return radixKeyPair;
    };
    RadixKeyPair.fromPrivate = function (privateKey) {
        var radixKeyPair = new RadixKeyPair();
        radixKeyPair.keyPair = ec.keyFromPrivate(privateKey);
        return radixKeyPair;
    };
    RadixKeyPair.fromRadixECKeyPair = function (keyPair) {
        return this.fromPublic(keyPair.public.data);
    };
    RadixKeyPair.prototype.getAddress = function () {
        var publicKey = this.keyPair.getPublic().encode('be', true);
        var addressBytes = [];
        addressBytes[0] = universe.getMagicByte();
        for (var i = 0; i < publicKey.length; i++) {
            addressBytes[i + 1] = publicKey[i];
        }
        var check = RadixUtil_1.default.hash(addressBytes, 0, publicKey.length + 1);
        for (var i = 0; i < 4; i++) {
            addressBytes[publicKey.length + 1 + i] = check[i];
        }
        return bs58_1.default.encode(Buffer.from(addressBytes));
    };
    RadixKeyPair.prototype.getHash = function () {
        return RadixUtil_1.default.hash(this.getPublic(), 0, this.getPublic().length);
    };
    RadixKeyPair.prototype.getUID = function () {
        var hash = this.getHash();
        return new RadixAtomModel_1.RadixEUID(hash.slice(0, 12));
    };
    RadixKeyPair.prototype.getShard = function () {
        return RadixUtil_1.default.longFromBigInt(this.getUID().value);
    };
    RadixKeyPair.prototype.getPublic = function () {
        return Buffer.from(this.keyPair.getPublic().encode('be', true));
    };
    RadixKeyPair.prototype.getPrivate = function (enc) {
        return this.keyPair.getPrivate(enc);
    };
    RadixKeyPair.prototype.sign = function (data) {
        var signature = this.keyPair.sign(data);
        return RadixAtomModel_1.RadixSignature.fromEllasticSignature(signature);
    };
    RadixKeyPair.prototype.verify = function (data, signature) {
        return this.keyPair.verify(data, elliptic_1.default.Signature(signature));
    };
    RadixKeyPair.prototype.equals = function (otherKeyPair) {
        return this.getAddress() == otherKeyPair.getAddress();
    };
    RadixKeyPair.prototype.toString = function () {
        return this.getAddress();
    };
    return RadixKeyPair;
}());
exports.default = RadixKeyPair;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhLZXlQYWlyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvd2FsbGV0L1JhZGl4S2V5UGFpci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwRUFBMkM7QUFFM0Msb0RBQTZFO0FBQzdFLDJEQUF5RDtBQUd6RCw4REFBeUI7QUFDekIsc0RBQXVCO0FBRXZCLElBQU0sUUFBUSxHQUFHLDZCQUFhLENBQUE7QUFDOUIsSUFBTSxFQUFFLEdBQUcsSUFBSSxrQkFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUVqQztJQUFBO0lBdUhBLENBQUM7SUFwSGlCLHdCQUFXLEdBQXpCO1FBQ0ksSUFBSSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQTtRQUNyQyxZQUFZLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUV0QyxPQUFPLFlBQVksQ0FBQTtJQUN2QixDQUFDO0lBRWEsd0JBQVcsR0FBekIsVUFBMEIsT0FBZTtRQUNyQyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUU3RCxpQkFBaUI7UUFDakIsSUFBSSxRQUFRLENBQUMsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQTtTQUMxRDtRQUVELFdBQVc7UUFDWCxJQUFJLEtBQUssR0FBRyxtQkFBUyxDQUFDLElBQUksQ0FDdEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFDN0IsQ0FBQyxFQUNELEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUNqQixDQUFBO1FBQ0QsS0FBSyxJ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
