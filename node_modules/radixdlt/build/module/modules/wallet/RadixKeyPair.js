import RadixUtil from '../common/RadixUtil';
import { RadixSignature, RadixEUID } from '../RadixAtomModel';
import { radixUniverse } from '../universe/RadixUniverse';
import EC from 'elliptic';
import bs58 from 'bs58';
const universe = radixUniverse;
const ec = new EC.ec('secp256k1');
export default class RadixKeyPair {
    static generateNew() {
        let radixKeyPair = new RadixKeyPair();
        radixKeyPair.keyPair = ec.genKeyPair();
        return radixKeyPair;
    }
    static fromAddress(address) {
        let raw = Array.prototype.slice.call(bs58.decode(address), 0);
        // Universe check
        if (universe.getMagicByte() != raw[0]) {
            throw new Error('Address is from a different universe');
        }
        // Checksum
        let check = RadixUtil.hash(raw.splice(0, raw.length - 4), 0, raw.length - 4);
        for (let i = 0; i < 4; i++) {
            if (check[i] != raw[raw.length - 4 + i]) {
                throw new Error('Invalid address');
            }
        }
        raw = Array.prototype.slice.call(bs58.decode(address), 0);
        let radixKeyPair = new RadixKeyPair();
        radixKeyPair.keyPair = ec.keyFromPublic(raw.splice(1, raw.length - 5));
        return radixKeyPair;
    }
    static fromPublic(publicKey) {
        if (!publicKey) {
            throw 'Missing public key';
        }
        if (publicKey.length != 33) {
            throw 'Public key must be 33 bytes, but was ' + publicKey.length;
        }
        let radixKeyPair = new RadixKeyPair();
        radixKeyPair.keyPair = ec.keyFromPublic(publicKey);
        return radixKeyPair;
    }
    static fromPrivate(privateKey) {
        let radixKeyPair = new RadixKeyPair();
        radixKeyPair.keyPair = ec.keyFromPrivate(privateKey);
        return radixKeyPair;
    }
    static fromRadixECKeyPair(keyPair) {
        return this.fromPublic(keyPair.public.data);
    }
    getAddress() {
        let publicKey = this.keyPair.getPublic().encode('be', true);
        let addressBytes = [];
        addressBytes[0] = universe.getMagicByte();
        for (let i = 0; i < publicKey.length; i++) {
            addressBytes[i + 1] = publicKey[i];
        }
        let check = RadixUtil.hash(addressBytes, 0, publicKey.length + 1);
        for (let i = 0; i < 4; i++) {
            addressBytes[publicKey.length + 1 + i] = check[i];
        }
        return bs58.encode(addressBytes);
    }
    getHash() {
        return RadixUtil.hash(this.getPublic(), 0, this.getPublic().length);
    }
    getUID() {
        let hash = this.getHash();
        return new RadixEUID(hash.slice(0, 12));
    }
    getShard() {
        return RadixUtil.longFromBigInt(this.getUID().value);
    }
    getPublic() {
        return Buffer.from(this.keyPair.getPublic().encode('be', true));
    }
    getPrivate(enc) {
        return this.keyPair.getPrivate(enc);
    }
    sign(data) {
        let signature = this.keyPair.sign(data);
        return RadixSignature.fromEllasticSignature(signature);
    }
    verify(data, signature) {
        return this.keyPair.verify(data, EC.Signature(signature));
    }
    equals(otherKeyPair) {
        return this.getAddress() == otherKeyPair.getAddress();
    }
    toString() {
        return this.getAddress();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhLZXlQYWlyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvd2FsbGV0L1JhZGl4S2V5UGFpci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSxxQkFBcUIsQ0FBQTtBQUUzQyxPQUFPLEVBQWtCLGNBQWMsRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUM3RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFHekQsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ3pCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQTtBQUV2QixNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUE7QUFDOUIsTUFBTSxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBRWpDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sWUFBWTtJQUd0QixNQUFNLENBQUMsV0FBVztRQUNyQixJQUFJLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFBO1FBQ3JDLFlBQVksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBRXRDLE9BQU8sWUFBWSxDQUFBO0lBQ3ZCLENBQUM7SUFFTSxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQWU7UUFDckMsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFFN0QsaUJBQWlCO1FBQ2pCLElBQUksUUFBUSxDQUFDLFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUE7U0FDMUQ7UUFFRCxXQUFXO1FBQ1gsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFD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