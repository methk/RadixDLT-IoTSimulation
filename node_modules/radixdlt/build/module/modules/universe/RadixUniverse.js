import RadixUniverseConfig from './RadixUniverseConfig';
import RadixNodeDiscoveryFromNodeFinder from './RadixNodeDiscoveryFromNodeFinder';
import RadixNodeDiscoveryFromSeed from './RadixNodeDiscoveryFromSeed';
import RadixNodeConnection from './RadixNodeConnection';
import RadixUtil from '../common/RadixUtil';
import { radixTokenManager } from '../token/RadixTokenManager';
import Long from 'long';
import promiseRetry from 'promise-retry';
export default class RadixUniverse {
    constructor() {
        this.initialized = false;
        this.liveNodes = [];
        this.connectedNodes = [];
        this.lastNetworkUpdate = 0;
        this.networkUpdateInterval = 1000 * 60 * 10;
        /**
         * Close all open connections
         * Recommended to call this before quitting the application, so that nodes can close the corresponding open connections as well
         */
        this.closeAllConnections = () => {
            for (const connection of this.connectedNodes) {
                connection.close();
            }
        };
    }
    /**
     * Bootstraps the universe with a specific configuration
     * Must be called before performing any operations
     * Use one of the predefined static configurations in this class
     * @param config
     */
    bootstrap(config) {
        this.universeConfig = config.universeConfig;
        this.nodeDiscovery = config.nodeDiscovery;
        this.nodeRPCAddress = config.nodeRPCAddress;
        this.initialized = true;
        radixTokenManager.initialize();
    }
    /**
     * Gets the universe magic byte, used mainly for generating an address from a public key
     * @returns
     */
    getMagicByte() {
        return this.universeConfig.getMagicByte();
    }
    loadPeersFromBootstrap() {
        return promiseRetry(async (retry, attempt) => {
            try {
                this.liveNodes = await this.nodeDiscovery.loadNodes();
                this.lastNetworkUpdate = Date.now();
                return this.liveNodes;
            }
            catch (error) {
                console.error(error);
                retry();
            }
        }, {
            retries: 1000,
            maxtimeout: 60000
        });
    }
    /**
     * Gets a RadixNodeConnection for a specified shard
     * Updates the node list if neccessary
     * @param shard
     * @returns node connection
     */
    getNodeConnection(shard) {
        return new Promise((resolve, reject) => {
            // Find active connection, return
            for (const node of this.connectedNodes) {
                if (node.isReady() && this.canNodeServiceShard(node.node, shard)) {
                    console.log('Got an active connection');
                    return resolve(node);
                }
            }
            // Failing that, find a pending node connection
            for (const node of this.connectedNodes) {
                if (this.canNodeServiceShard(node.node, shard)) {
                    console.log('Got a pending connection');
                    // Wait for ready or error
                    node.on('open', () => {
                        resolve(node);
                    });
                    node.on('closed', () => {
                        resolve(this.getNodeConnection(shard));
                    });
                    return;
                }
            }
            // Open a new connection, return when ready
            console.log('Opening a new connection');
            this.openNodeConnection(shard).then((connection) => {
                if (connection) {
                    resolve(connection);
                }
                else {
                    reject(`Coudln't find a node to connect to`);
                }
            });
        });
    }
    async openNodeConnection(shard) {
        if (Date.now() - this.lastNetworkUpdate > this.networkUpdateInterval) {
            await this.loadPeersFromBootstrap();
        }
        // Randomize node order every time
        this.liveNodes = RadixUtil.shuffleArray(this.liveNodes);
        for (const node of this.liveNodes) {
            if (this.canNodeServiceShard(node, shard)) {
                const connection = new RadixNodeConnection(node, this.nodeRPCAddress);
                this.connectedNodes.push(connection);
                connection.on('closed', () => {
                    // Remove connection from connected nodes 
                    const nodeIndex = this.connectedNodes.indexOf(connection);
                    if (nodeIndex > -1) {
                        this.connectedNodes.splice(nodeIndex, 1);
                    }
                });
                try {
                    await connection.openConnection();
                }
                catch (error) {
                    console.log(error);
                    return null;
                }
                return connection;
            }
        }
        return null;
    }
    canNodeServiceShard(node, shard) {
        if (node.system) {
            const low = Long.fromValue(node.system.shards.low);
            const high = Long.fromValue(node.system.shards.high);
            if (high.lessThan(low)) {
                // Wrap around
                return (shard.greaterThanOrEqual(low) || shard.lessThanOrEqual(high));
            }
            else {
                return (shard.greaterThanOrEqual(low) && shard.lessThanOrEqual(high));
            }
        }
        return false;
    }
}
RadixUniverse.ALPHANET = {
    universeConfig: RadixUniverseConfig.ALPHANET,
    nodeDiscovery: new RadixNodeDiscoveryFromNodeFinder('https://alphanet.radixdlt.com/node-finder', nodeIp => `https://alphanet.radixdlt.com/node/${nodeIp}/rpc`),
    nodeRPCAddress: nodeIp => `wss://alphanet.radixdlt.com/node/${nodeIp}/rpc`,
};
RadixUniverse.HIGHGARDEN = {
    universeConfig: RadixUniverseConfig.HIGHGARDEN,
    nodeDiscovery: new RadixNodeDiscoveryFromNodeFinder('https://highgarden.radixdlt.com/node-finder', nodeIp => `https://highgarden.radixdlt.com/node/${nodeIp}/rpc`),
    // nodeIp => `https://highgarden.radixdlt.com/node/35.176.114.13/rpc`),
    nodeRPCAddress: nodeIp => `wss://highgarden.radixdlt.com/node/${nodeIp}/rpc`,
};
RadixUniverse.SUNSTONE = {
    universeConfig: RadixUniverseConfig.SUNSTONE,
    nodeDiscovery: new RadixNodeDiscoveryFromNodeFinder('https://sunstone.radixdlt.com/node-finder', nodeIp => `https://${nodeIp}/rpc`),
    nodeRPCAddress: nodeIp => `wss://${nodeIp}:443/rpc`,
};
RadixUniverse.WINTERFELL = {
    universeConfig: RadixUniverseConfig.WINTERFELL,
    nodeDiscovery: new RadixNodeDiscoveryFromSeed('http://52.190.0.18:8080/rpc'),
    nodeRPCAddress: nodeIp => `ws://${nodeIp}:8080/rpc`,
};
RadixUniverse.WINTERFELL_LOCAL = {
    universeConfig: RadixUniverseConfig.WINTERFELL_LOCAL,
    nodeDiscovery: new RadixNodeDiscoveryFromSeed('http://localhost:8080/rpc'),
    nodeRPCAddress: nodeIp => `ws://127.0.0.1:8080/rpc`,
};
export const radixUniverse = new RadixUniverse();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhVbml2ZXJzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL3VuaXZlcnNlL1JhZGl4VW5pdmVyc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxtQkFBbUIsTUFBTSx1QkFBdUIsQ0FBQTtBQUV2RCxPQUFPLGdDQUFnQyxNQUFNLG9DQUFvQyxDQUFBO0FBQ2pGLE9BQU8sMEJBQTBCLE1BQU0sOEJBQThCLENBQUE7QUFFckUsT0FBTyxtQkFBbUIsTUFBTSx1QkFBdUIsQ0FBQTtBQUN2RCxPQUFPLFNBQVMsTUFBTSxxQkFBcUIsQ0FBQTtBQUUzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUU5RCxPQUFPLElBQUksTUFBTSxNQUFNLENBQUE7QUFDdkIsT0FBTyxZQUFZLE1BQU0sZUFBZSxDQUFBO0FBRXhDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sYUFBYTtJQUFsQztRQXdDVyxnQkFBVyxHQUFHLEtBQUssQ0FBQTtRQUtsQixjQUFTLEdBQWdCLEVBQUUsQ0FBQTtRQUMzQixtQkFBYyxHQUEwQixFQUFFLENBQUE7UUFDMUMsc0JBQWlCLEdBQUcsQ0FBQyxDQUFBO1FBQ3JCLDBCQUFxQixHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFBO1FBcUk5Qzs7O1dBR0c7UUFDSSx3QkFBbUIsR0FBRyxHQUFHLEVBQUU7WUFDOUIsS0FBSyxNQUFNLFVBQVUsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUMxQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUE7YUFDckI7UUFDTCxDQUFDLENBQUE7SUFxQkwsQ0FBQztJQWhLRzs7Ozs7T0FLRztJQUNJLFNBQVMsQ0FBQyxNQUloQjtRQUNHLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQTtRQUMzQyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUE7UUFDekMs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