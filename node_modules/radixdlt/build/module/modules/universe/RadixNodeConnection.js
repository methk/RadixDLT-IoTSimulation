import { BehaviorSubject, Subject } from 'rxjs/Rx';
import { Client } from 'rpc-websockets';
import { RadixEUID, RadixSerializer } from '../RadixAtomModel';
import events from 'events';
export class RadixNodeConnection extends events.EventEmitter {
    constructor(node, nodeRPCAddress) {
        super();
        this.node = node;
        this.nodeRPCAddress = nodeRPCAddress;
        this._subscriptions = {};
        this._atomUpdateSubjects = {};
        this.lastSubscriberId = 1;
        this.ping = () => {
            if (this.isReady()) {
                this._socket
                    .call('Network.getSelf', {
                    id: 0,
                }).then((response) => {
                    // console.log('Ping', response)
                });
            }
        };
        this.close = () => {
            this._socket.close();
        };
        this._onClosed = () => {
            console.log('Socket closed');
            clearInterval(this.pingInterval);
            // Close subject
            for (const subscriberId in this._subscriptions) {
                const subscription = this._subscriptions[subscriberId];
                if (!subscription.closed) {
                    subscription.error('Socket closed');
                }
            }
            for (const subscriberId in this._atomUpdateSubjects) {
                const subject = this._atomUpdateSubjects[subscriberId];
                if (!subject.closed) {
                    subject.error('Socket closed');
                }
            }
            this.emit('closed');
        };
        this._onAtomSubmissionStateUpdate = (notification) => {
            console.log('Atom Submission state update', notification);
            // Handle atom state update
            const subscriberId = notification.subscriberId;
            const value = notification.value;
            const message = notification.message;
            const subject = this._atomUpdateSubjects[subscriberId];
            switch (value) {
                case 'SUBMITTING':
                case 'SUBMITTED':
                    subject.next(value);
                    break;
                case 'STORED':
                    subject.next(value);
                    subject.complete();
                    break;
                case 'COLLISION':
                case 'ILLEGAL_STATE':
                case 'UNSUITABLE_PEER':
                case 'VALIDATION_ERROR':
                    subject.error(value + ': ' + message);
                    break;
            }
        };
        this._onAtomReceivedNotification = (notification) => {
            console.log('Atom received', notification);
            // Store atom for testing
            // let jsonPath = './atomNotification.json'
            // // let jsonPath = path.join(__dirname, '..', '..', '..', '..', 'atomNotification.json')
            // console.log(jsonPath)
            // fs.writeFile(jsonPath, JSON.stringify(notification), (error) => {
            //    // Throws an error, you could also catch it here
            //    if (error) { throw error }
            //    // Success case, the file was saved
            //    console.log('Atom saved!')
            // })
            const deserializedAtoms = RadixSerializer.fromJson(notification.atoms);
            console.log(deserializedAtoms);
            // Check HIDs for testing
            for (let i = 0; i < deserializedAtoms.length; i++) {
                const deserializedAtom = deserializedAtoms[i];
                const serializedAtom = notification.atoms[i];
                if (serializedAtom.hid &&
                    deserializedAtom.hid.equals(RadixEUID.fromJson(serializedAtom.hid))) {
                    console.log('HID match');
                }
                else if (serializedAtom.hid) {
                    console.error('HID mismatch');
                }
            }
            // Forward atoms to correct wallets
            const subscription = this._subscriptions[notification.subscriberId];
            for (const atom of deserializedAtoms) {
                subscription.next({
                    action: 'STORE',
                    atom,
                });
            }
        };
        this.node = node;
    }
    getSubscriberId() {
        this.lastSubscriberId++;
        return this.lastSubscriberId;
    }
    /**
     * Check whether the node connection is ready for requests
     * @returns true if ready
     */
    isReady() {
        return this._socket && this._socket.ready;
    }
    /**
     * Opens connection
     * @returns a promise that resolves once the connection is ready, or rejects on error or timeout
     */
    async openConnection() {
        return new Promise((resolve, reject) => {
            this.address = this.nodeRPCAddress(this.node.host.ip);
            // For testing atom queueing during connection issues
            // if (Math.random() > 0.1) {
            //    this.address += 'garbage'
            // }
            console.log('connecting to ' + this.address);
            this._socket = new Client(this.address, {
                reconnect: false
            });
            this._socket.on('close', this._onClosed);
            this._socket.on('error', error => {
                console.error(error);
                reject(error);
            });
            setTimeout(() => {
                if (!this._socket.ready) {
                    console.warn('Socket timeout');
                    this._socket.close();
                    this.emit('closed');
                    reject('Timeout');
                }
            }, 5000);
            this._socket.on('open', () => {
                this.pingInterval = setInterval(this.ping, 10000);
                this.emit('open');
                this._socket.on('Atoms.subscribeUpdate', this._onAtomReceivedNotification);
                this._socket.on('AtomSubmissionState.onNext', this._onAtomSubmissionStateUpdate);
                resolve();
            });
        });
    }
    /**
     * Subscribe for all existing and future atoms for a given address
     * @param address base58 formatted address
     * @returns a stream of atoms
     */
    subscribe(address) {
        const subscriberId = this.getSubscriberId();
        const subscription = new Subject();
        this._subscriptions[subscriberId] = subscription;
        this._socket
            .call('Atoms.subscribe', {
            subscriberId,
            query: {
                destinationAddress: address,
            },
        })
            .then((response) => {
            console.log('Subscribed for address ' + address, response);
        })
            .catch((error) => {
            console.error(error);
            subscription.error(error);
        });
        return subscription;
    }
    /**
     * Submit an atom to the ledger
     * @param atom
     * @returns A stream of the status of the atom submission
     */
    submitAtom(atom) {
        // Store atom for testing
        // let jsonPath = path.join('./submitAtom.json')
        // console.log(jsonPath)
        // fs.writeFile(jsonPath, JSON.stringify(atom.toJson()), (error) => {
        //    // Throws an error, you could also catch it here
        //    if (error) { throw error }
        //    // Success case, the file was saved
        //    console.log('Atom saved!')
        // })
        const subscriberId = this.getSubscriberId();
        const atomStateSubject = new BehaviorSubject('CREATED');
        this._atomUpdateSubjects[subscriberId] = atomStateSubject;
        const timeout = setTimeout(() => {
            this._socket.close();
            atomStateSubject.error('Socket timeout');
        }, 5000);
        this._socket
            .call('Universe.submitAtomAndSubscribe', {
            subscriberId,
            atom: atom.toJson()
        })
            .then(() => {
            clearTimeout(timeout);
            atomStateSubject.next('SUBMITTED');
        })
            .catch((error) => {
            clearTimeout(timeout);
            atomStateSubject.error(error);
        });
        return atomStateSubject;
    }
    /**
     * NOT IMPLEMENTED
     * Query the ledger for an atom by its id
     * @param id
     * @returns The atom
     */
    async getAtomById(id) {
        // TODO: everything
        return this._socket
            .call('Atoms.getAtomInfo', { id: id.toJson() })
            .then((response) => {
            return RadixSerializer.fromJson(response.result);
        });
    }
}
export default RadixNodeConnection;
//# sourceMappingURL=data:application/json;base64,