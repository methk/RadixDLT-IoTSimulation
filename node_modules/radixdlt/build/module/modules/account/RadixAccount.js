import { BehaviorSubject } from 'rxjs';
import { TSMap } from 'typescript-map';
import RadixKeyPair from '../wallet/RadixKeyPair';
import RadixDataAccountSystem from './RadixDataAccountSystem';
import { radixUniverse } from '../universe/RadixUniverse';
import { RadixTransferAccountSystem, RadixMessagingAccountSystem, RadixDecryptionAccountSystem, RadixCacheAccountSystem } from '../..';
export default class RadixAccount {
    /**
     * Creates an instance of radix account.
     * @param keyPair Public key of the account
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     */
    constructor(keyPair, plain = false) {
        this.keyPair = keyPair;
        this.accountSystems = new TSMap();
        this.connectionStatus = new BehaviorSubject('STARTING');
        this.openNodeConnection = async () => {
            this.connectionStatus.next('CONNECTING');
            try {
                this.nodeConnection = await radixUniverse.getNodeConnection(this.keyPair.getShard());
                this.connectionStatus.next('CONNECTED');
                this.nodeConnection.on('closed', this._onConnectionClosed);
                // Subscribe to events
                this.atomSubscription = this.nodeConnection.subscribe(this.keyPair.toString());
                this.atomSubscription.subscribe({
                    next: this._onAtomReceived,
                    error: error => console.error(`Subscription error: ${error}`)
                });
            }
            catch (error) {
                console.error(error);
                setTimeout(this._onConnectionClosed, 1000);
            }
        };
        this._onAtomReceived = async (atomUpdate) => {
            for (const system of this.accountSystems.values()) {
                await system.processAtomUpdate(atomUpdate);
            }
        };
        this._onConnectionClosed = () => {
            // Get a new one
            this.openNodeConnection();
        };
        if (!plain) {
            this.cacheSystem = new RadixCacheAccountSystem(keyPair);
            this.addAccountSystem(this.cacheSystem);
            this.decryptionSystem = new RadixDecryptionAccountSystem();
            this.addAccountSystem(this.decryptionSystem);
            this.transferSystem = new RadixTransferAccountSystem(keyPair);
            this.addAccountSystem(this.transferSystem);
            this.dataSystem = new RadixDataAccountSystem(keyPair);
            this.addAccountSystem(this.dataSystem);
            this.messagingSystem = new RadixMessagingAccountSystem(keyPair);
            this.addAccountSystem(this.messagingSystem);
        }
    }
    /**
     * Create an instance of radix account from an address
     * @param address string address
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     * @returns
     */
    static fromAddress(address, plain = false) {
        return new RadixAccount(RadixKeyPair.fromAddress(address), plain);
    }
    enableDecryption(decryptionProvider) {
        this.decryptionSystem.decryptionProvider = decryptionProvider;
    }
    enableCache(cacheProvider) {
        this.cacheSystem.atomCache = cacheProvider;
        // Load atoms from cache
        return this.cacheSystem.loadAtoms().then((atoms) => {
            for (const atom of atoms) {
                this._onAtomReceived({
                    action: 'STORE',
                    atom,
                });
            }
        });
    }
    getAddress() {
        return this.keyPair.getAddress();
    }
    addAccountSystem(system) {
        if (this.accountSystems.has(system.name)) {
            throw new Error(`System "${system.name}" already exists in account, you can only have one of each system per account`);
        }
        this.accountSystems.set(system.name, system);
        return system;
    }
    removeAccountSystem(name) {
        if (this.accountSystems.has(name)) {
            this.accountSystems.delete(name);
        }
    }
    getSystem(name) {
        if (this.accountSystems.has(name)) {
            return this.accountSystems.get(name);
        }
        throw new Error(`System "${name}" doesn't exist in account`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBY2NvdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYWNjb3VudC9SYWRpeEFjY291bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBVyxNQUFNLE1BQU0sQ0FBQTtBQUMvQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFJdEMsT0FBTyxZQUFZLE1BQU0sd0JBQXdCLENBQUE7QUFFakQsT0FBTyxzQkFBc0IsTUFBTSwwQkFBMEIsQ0FBQTtBQUc3RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFFekQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLDJCQUEyQixFQUFFLDRCQUE0QixFQUEwQix1QkFBdUIsRUFBRSxNQUFNLE9BQU8sQ0FBQTtBQUU5SixNQUFNLENBQUMsT0FBTyxPQUFPLFlBQVk7SUFhN0I7Ozs7O09BS0c7SUFDSCxZQUFxQixPQUFxQixFQUFFLEtBQUssR0FBRyxLQUFLO1FBQXBDLFlBQU8sR0FBUCxPQUFPLENBQWM7UUFqQmxDLG1CQUFjLEdBQXNDLElBQUksS0FBSyxFQUFFLENBQUE7UUFHaEUscUJBQWdCLEdBQTRCLElBQUksZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBOEYzRSx1QkFBa0IsR0FBRyxLQUFLLElBQUksRUFBRTtZQUNuQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQ3hDLElBQUk7Z0JBQ0EsSUFBSSxDQUFDLGNBQWMsR0FBRyxNQUFNLGFBQWEsQ0FBQyxpQkFBaUIsQ0FDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FDMUIsQ0FBQTtnQkFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO2dCQUN2QyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVB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