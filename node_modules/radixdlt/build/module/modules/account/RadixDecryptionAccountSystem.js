import RadixECIES from '../crypto/RadixECIES';
export default class RadixDecryptionAccountSystem {
    constructor(decryptionProvider) {
        this.name = 'DECRYPTION';
        if (decryptionProvider) {
            this.decryptionProvider = decryptionProvider;
        }
    }
    async processAtomUpdate(atomUpdate) {
        const atom = atomUpdate.atom;
        if (this.decryptionProvider &&
            atom.hasOwnProperty('encryptor') &&
            atom.hasOwnProperty('encrypted')) {
            let privateKey = null;
            for (const protector of atom.encryptor
                .protectors) {
                try {
                    privateKey = await this.decryptionProvider.decryptECIESPayload(protector.data);
                }
                catch (error) {
                    // Do nothing
                }
            }
            if (privateKey) {
                try {
                    const rawPayload = await RadixECIES.decrypt(privateKey, atom.encrypted.data);
                    atom.payload = rawPayload.toString();
                }
                catch (error) {
                    console.error('Decrypted a protector but unable to decrypt payload', atom);
                }
            }
            else {
                console.warn('Unable to decrypt any protectors', atom);
            }
        }
        else if (atom.hasOwnProperty('encrypted') &&
            !atom.hasOwnProperty('encryptor')) {
            atom.payload = atom.encrypted.data.toString();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhEZWNyeXB0aW9uQWNjb3VudFN5c3RlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2FjY291bnQvUmFkaXhEZWNyeXB0aW9uQWNjb3VudFN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLFVBQVUsTUFBTSxzQkFBc0IsQ0FBQTtBQUk3QyxNQUFNLENBQUMsT0FBTyxPQUFPLDRCQUE0QjtJQUk3QyxZQUFZLGtCQUE0QztRQUhqRCxTQUFJLEdBQUcsWUFBWSxDQUFBO1FBSXRCLElBQUksa0JBQWtCLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFBO1NBQy9DO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxVQUEyQjtRQUN0RCxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFBO1FBRTVCLElBQ0ksSUFBSSxDQUFDLGtCQUFrQjtZQUN2QixJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQztZQUNoQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxFQUNsQztZQUNFLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQTtZQUVyQixLQUFLLE1BQU0sU0FBUyxJQUFLLElBQXlCLENBQUMsU0FBUztpQkFDdkQsVUFBVSxFQUFFO2dCQUNiLElBQUk7b0JBQ0EsVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLG1CQUFtQixDQUMxRCxTQUFTLENBQUMsSUFBSSxDQUNqQixDQUFBO2lCQUNKO2dCQUFDLE9BQU8sS0FBSyxFQUFFO29CQUNaLGFBQWE7aUJBQ2hCO2FBQ0o7WUFFRCxJQUFJLFVBQVUsRUFBRTtnQkFDWixJQUFJO29CQUNBLE1BQU0sVUFBVSxHQUFHLE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FDdkMsVUFBVSxFQUNULElBQXlCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDNUMsQ0FBQTtvQkFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtpQkFDdkM7Z0JBQUMsT0FBTyxLQUFLLEVBQUU7b0JBQ1osT0FBTyxDQUFDLEtBQUssQ0FDVCxxREFBcUQsRUFDckQsSUFBSSxDQUNQLENBQUE7aUJBQ0o7YUFDSjtpQkFBTTtnQkFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLElBQUksQ0FBQyxDQUFBO2FBQ3pEO1NBQ0o7YUFBTSxJQUNILElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDO1lBQ2hDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsRUFDbkM7WUFDRSxJQUFJLENBQUMsT0FBTyxHQUFJLElBQXlCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtTQUN0RTtJQUNMLENBQUM7Q0FDSiJ9